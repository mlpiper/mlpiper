<?xml version="1.0" encoding="UTF-8"?>
<project
		xmlns="http://maven.apache.org/POM/4.0.0"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
        <modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.parallelmachines.reflex</groupId>
		<artifactId>mcenter-common</artifactId>
		<version>1.4.0</version>
		<relativePath>..</relativePath>
	</parent>

	<properties>
        <reflexVersion>1.4.0</reflexVersion>
    </properties>

	<groupId>com.parallelmachines.reflex.common</groupId>
	<artifactId>reflex-common</artifactId>
	<packaging>jar</packaging>
	<version>${reflexVersion}</version>
	<name>reflex-common</name>
	<url>http://maven.apache.org</url>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.4</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-compress</artifactId>
			<version>LATEST</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>LATEST</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-archiver</artifactId>
			<version>2.2</version>
		</dependency>
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>3.3.1</version>
		</dependency>
		<dependency>
			<groupId>com.trueaccord.scalapb</groupId>
			<artifactId>scalapbc_2.11</artifactId>
			<version>0.5.47</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>27.0-jre</version>
		</dependency>
	</dependencies>
	<build>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<!-- Add src/main/scala to eclipse build path -->
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-sources/protobuf</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Scala Compiler -->
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>scala-maven-plugin</artifactId>
				<version>3.1.4</version>
				<executions>
					<!-- Run scala compiler in the process-resources phase, so that dependencies on
						scala classes can be resolved later in the (Java) compile phase -->
					<execution>
						<id>scala-compile-first</id>
						<phase>process-resources</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
					<!-- Run scala compiler in the process-test-resources phase, so that dependencies on
						 scala classes can be resolved later in the (Java) test-compile phase -->
					<execution>
						<id>scala-test-compile</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<jvmArgs>
						<jvmArg>-Xms128m</jvmArg>
						<jvmArg>-Xmx512m</jvmArg>
					</jvmArgs>
				</configuration>
			</plugin>
			<!-- Java Compiler -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<!-- Create the generated protobuf folder in target  -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<id>mkdir-generated-sources</id>
						<goals>
							<goal>run</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<target>
								<mkdir dir="${project.build.directory}/generated-sources/protobuf"/>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Compile the proto file(s) -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<inherited>false</inherited>
				<executions>
					<execution>
						<id>generate-scala-protobuf-classes</id>
						<goals>
							<goal>java</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<mainClass>com.trueaccord.scalapb.ScalaPBC</mainClass>
							<cleanupDaemonThreads>false</cleanupDaemonThreads>
							<includePluginDependencies>true</includePluginDependencies>
							<classpathScope>compile</classpathScope>
							<arguments>
								<!-- <argument>-v300</argument> -->
								<!-- for protoc v3.0.0, can be 261 for v2.6.1 -->
								<argument>--throw</argument>
								<!-- Important: otherwise scalapbc will kill the VM -->
								<argument>--proto_path=${project.basedir}/src/protobuf</argument>
								<argument>--scala_out=${project.build.directory}/generated-sources/protobuf</argument>
								<!--
								If you need to pass generator parameters to ScalaPB, then instead of the -scala_out line above,
								have something like this:
								<argument>-scala_out=single_line_to_string,java_conversions:${project.build.directory}/generated-sources/protobuf</argument>
								-->
								<argument>${project.basedir}/src/protobuf/ReflexEvent.proto</argument>
								<argument>${project.basedir}/src/protobuf/InfoType.proto</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>generate-java-protobuf-classes</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<inherited>false</inherited>
						<configuration>
							<executable>protoc</executable>
							<arguments>
								<argument>--proto_path=${project.basedir}/src/protobuf</argument>
								<argument>--java_out=${project.build.directory}/generated-sources/protobuf</argument>
								<argument>${project.basedir}/src/protobuf/ReflexEvent.proto</argument>
								<argument>${project.basedir}/src/protobuf/InfoType.proto</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>generate-python-protobuf-classes</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<inherited>false</inherited>
						<configuration>
							<executable>protoc</executable>
							<arguments>
								<argument>--proto_path=${project.basedir}/src/protobuf</argument>
								<argument>--python_out=${project.build.directory}/generated-sources/protobuf</argument>
								<argument>${project.basedir}/src/protobuf/ReflexEvent.proto</argument>
								<argument>${project.basedir}/src/protobuf/InfoType.proto</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<inherited>false</inherited>
						<id>packages-mcenter-v0-client</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<workingDirectory>${project.basedir}/../../mcenter_client_v0</workingDirectory>
							<executable>make</executable>
							<commandlineArgs>pkgs DISTDIR=${project.build.directory}</commandlineArgs>
						</configuration>
					</execution>
					<execution>
						<inherited>false</inherited>
						<id>packages-mcenter-cli</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<workingDirectory>${project.basedir}/../../mcenter_cli</workingDirectory>
							<executable>make</executable>
							<commandlineArgs>pkgs DISTDIR=${project.build.directory}</commandlineArgs>
						</configuration>
					</execution>
					<execution>
						<inherited>false</inherited>
						<id>package-python2-wheel-mcenter-client</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<workingDirectory>${project.basedir}/../../mcenter_client</workingDirectory>
							<executable>make</executable>
							<commandlineArgs>wheel2 DISTDIR=${project.build.directory}</commandlineArgs>
						</configuration>
					</execution>
					<execution>
						<inherited>false</inherited>
						<id>package-python3-wheel-mcenter-client</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<workingDirectory>${project.basedir}/../../mcenter_client</workingDirectory>
							<executable>make</executable>
							<commandlineArgs>wheel3 DISTDIR=${project.build.directory}</commandlineArgs>
						</configuration>
					</execution>
					<execution>
						<inherited>false</inherited>
						<id>package-html-mcenter-client</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<workingDirectory>${project.basedir}/../../mcenter_client</workingDirectory>
							<executable>make</executable>
							<commandlineArgs>html DISTDIR=${project.build.directory}</commandlineArgs>
						</configuration>
					</execution>
					<execution>
						<id>mcenter-client-tests</id>
						<phase>test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<workingDirectory>${project.basedir}/../../mcenter_client</workingDirectory>
							<executable>make</executable>
							<commandlineArgs>test</commandlineArgs>
							<skip>${skipTests}</skip>
						</configuration>
					</execution>
					<execution>
						<id>mcenter-client-clean</id>
						<phase>clean</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<workingDirectory>${project.basedir}/../../mcenter_client</workingDirectory>
							<executable>make</executable>
							<commandlineArgs>clean</commandlineArgs>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>
</project>
