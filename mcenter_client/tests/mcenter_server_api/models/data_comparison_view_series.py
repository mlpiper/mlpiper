# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mcenter_server_api.models.base_model_ import Model
from mcenter_server_api import util


class DataComparisonViewSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode=None, legend=None, db_name=None, query=None, host=None):  # noqa: E501
        """DataComparisonViewSeries - a model defined in OpenAPI

        :param mode: The mode of this DataComparisonViewSeries.  # noqa: E501
        :type mode: str
        :param legend: The legend of this DataComparisonViewSeries.  # noqa: E501
        :type legend: str
        :param db_name: The db_name of this DataComparisonViewSeries.  # noqa: E501
        :type db_name: str
        :param query: The query of this DataComparisonViewSeries.  # noqa: E501
        :type query: str
        :param host: The host of this DataComparisonViewSeries.  # noqa: E501
        :type host: str
        """
        self.openapi_types = {
            'mode': 'str',
            'legend': 'str',
            'db_name': 'str',
            'query': 'str',
            'host': 'str'
        }

        self.attribute_map = {
            'mode': 'mode',
            'legend': 'legend',
            'db_name': 'dbName',
            'query': 'query',
            'host': 'host'
        }

        self._mode = mode
        self._legend = legend
        self._db_name = db_name
        self._query = query
        self._host = host

    @classmethod
    def from_dict(cls, dikt) -> 'DataComparisonViewSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataComparisonView_series of this DataComparisonViewSeries.  # noqa: E501
        :rtype: DataComparisonViewSeries
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this DataComparisonViewSeries.


        :return: The mode of this DataComparisonViewSeries.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DataComparisonViewSeries.


        :param mode: The mode of this DataComparisonViewSeries.
        :type mode: str
        """

        self._mode = mode

    @property
    def legend(self):
        """Gets the legend of this DataComparisonViewSeries.


        :return: The legend of this DataComparisonViewSeries.
        :rtype: str
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this DataComparisonViewSeries.


        :param legend: The legend of this DataComparisonViewSeries.
        :type legend: str
        """

        self._legend = legend

    @property
    def db_name(self):
        """Gets the db_name of this DataComparisonViewSeries.


        :return: The db_name of this DataComparisonViewSeries.
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this DataComparisonViewSeries.


        :param db_name: The db_name of this DataComparisonViewSeries.
        :type db_name: str
        """

        self._db_name = db_name

    @property
    def query(self):
        """Gets the query of this DataComparisonViewSeries.


        :return: The query of this DataComparisonViewSeries.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this DataComparisonViewSeries.


        :param query: The query of this DataComparisonViewSeries.
        :type query: str
        """

        self._query = query

    @property
    def host(self):
        """Gets the host of this DataComparisonViewSeries.


        :return: The host of this DataComparisonViewSeries.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this DataComparisonViewSeries.


        :param host: The host of this DataComparisonViewSeries.
        :type host: str
        """

        self._host = host
