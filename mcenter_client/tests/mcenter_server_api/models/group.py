# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mcenter_server_api.models.base_model_ import Model
from mcenter_server_api import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_set=None, agents=None, created=None, created_by=None, id=None, name=None, workflows=None):  # noqa: E501
        """Group - a model defined in OpenAPI

        :param agent_set: The agent_set of this Group.  # noqa: E501
        :type agent_set: List[object]
        :param agents: The agents of this Group.  # noqa: E501
        :type agents: List[str]
        :param created: The created of this Group.  # noqa: E501
        :type created: int
        :param created_by: The created_by of this Group.  # noqa: E501
        :type created_by: str
        :param id: The id of this Group.  # noqa: E501
        :type id: str
        :param name: The name of this Group.  # noqa: E501
        :type name: str
        :param workflows: The workflows of this Group.  # noqa: E501
        :type workflows: List[object]
        """
        self.openapi_types = {
            'agent_set': 'List[object]',
            'agents': 'List[str]',
            'created': 'int',
            'created_by': 'str',
            'id': 'str',
            'name': 'str',
            'workflows': 'List[object]'
        }

        self.attribute_map = {
            'agent_set': 'agentSet',
            'agents': 'agents',
            'created': 'created',
            'created_by': 'createdBy',
            'id': 'id',
            'name': 'name',
            'workflows': 'workflows'
        }

        self._agent_set = agent_set
        self._agents = agents
        self._created = created
        self._created_by = created_by
        self._id = id
        self._name = name
        self._workflows = workflows

    @classmethod
    def from_dict(cls, dikt) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Group of this Group.  # noqa: E501
        :rtype: Group
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_set(self):
        """Gets the agent_set of this Group.


        :return: The agent_set of this Group.
        :rtype: List[object]
        """
        return self._agent_set

    @agent_set.setter
    def agent_set(self, agent_set):
        """Sets the agent_set of this Group.


        :param agent_set: The agent_set of this Group.
        :type agent_set: List[object]
        """

        self._agent_set = agent_set

    @property
    def agents(self):
        """Gets the agents of this Group.


        :return: The agents of this Group.
        :rtype: List[str]
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """Sets the agents of this Group.


        :param agents: The agents of this Group.
        :type agents: List[str]
        """

        self._agents = agents

    @property
    def created(self):
        """Gets the created of this Group.


        :return: The created of this Group.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Group.


        :param created: The created of this Group.
        :type created: int
        """
        if created is not None and created < 0:  # noqa: E501
            raise ValueError("Invalid value for `created`, must be a value greater than or equal to `0`")  # noqa: E501

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this Group.


        :return: The created_by of this Group.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Group.


        :param created_by: The created_by of this Group.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this Group.


        :return: The id of this Group.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.


        :param id: The id of this Group.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Group.


        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.


        :param name: The name of this Group.
        :type name: str
        """

        self._name = name

    @property
    def workflows(self):
        """Gets the workflows of this Group.


        :return: The workflows of this Group.
        :rtype: List[object]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """Sets the workflows of this Group.


        :param workflows: The workflows of this Group.
        :type workflows: List[object]
        """

        self._workflows = workflows
