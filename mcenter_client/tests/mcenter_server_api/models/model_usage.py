# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mcenter_server_api.models.base_model_ import Model
from mcenter_server_api import util


class ModelUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_alerts=None, ion_id=None, ion_name=None, ion_node_id=None, ml_alerts=None, model_id=None, pipeline_id=None, pipeline_name=None, predictions=None, usage_times=None, user=None):  # noqa: E501
        """ModelUsage - a model defined in OpenAPI

        :param data_alerts: The data_alerts of this ModelUsage.  # noqa: E501
        :type data_alerts: int
        :param ion_id: The ion_id of this ModelUsage.  # noqa: E501
        :type ion_id: str
        :param ion_name: The ion_name of this ModelUsage.  # noqa: E501
        :type ion_name: str
        :param ion_node_id: The ion_node_id of this ModelUsage.  # noqa: E501
        :type ion_node_id: str
        :param ml_alerts: The ml_alerts of this ModelUsage.  # noqa: E501
        :type ml_alerts: int
        :param model_id: The model_id of this ModelUsage.  # noqa: E501
        :type model_id: str
        :param pipeline_id: The pipeline_id of this ModelUsage.  # noqa: E501
        :type pipeline_id: str
        :param pipeline_name: The pipeline_name of this ModelUsage.  # noqa: E501
        :type pipeline_name: str
        :param predictions: The predictions of this ModelUsage.  # noqa: E501
        :type predictions: int
        :param usage_times: The usage_times of this ModelUsage.  # noqa: E501
        :type usage_times: ModelUsageUsageTimes
        :param user: The user of this ModelUsage.  # noqa: E501
        :type user: str
        """
        self.openapi_types = {
            'data_alerts': 'int',
            'ion_id': 'str',
            'ion_name': 'str',
            'ion_node_id': 'str',
            'ml_alerts': 'int',
            'model_id': 'str',
            'pipeline_id': 'str',
            'pipeline_name': 'str',
            'predictions': 'int',
            'usage_times': 'ModelUsageUsageTimes',
            'user': 'str'
        }

        self.attribute_map = {
            'data_alerts': 'dataAlerts',
            'ion_id': 'ionId',
            'ion_name': 'ionName',
            'ion_node_id': 'ionNodeId',
            'ml_alerts': 'mlAlerts',
            'model_id': 'modelId',
            'pipeline_id': 'pipelineId',
            'pipeline_name': 'pipelineName',
            'predictions': 'predictions',
            'usage_times': 'usageTimes',
            'user': 'user'
        }

        self._data_alerts = data_alerts
        self._ion_id = ion_id
        self._ion_name = ion_name
        self._ion_node_id = ion_node_id
        self._ml_alerts = ml_alerts
        self._model_id = model_id
        self._pipeline_id = pipeline_id
        self._pipeline_name = pipeline_name
        self._predictions = predictions
        self._usage_times = usage_times
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'ModelUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ModelUsage of this ModelUsage.  # noqa: E501
        :rtype: ModelUsage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_alerts(self):
        """Gets the data_alerts of this ModelUsage.


        :return: The data_alerts of this ModelUsage.
        :rtype: int
        """
        return self._data_alerts

    @data_alerts.setter
    def data_alerts(self, data_alerts):
        """Sets the data_alerts of this ModelUsage.


        :param data_alerts: The data_alerts of this ModelUsage.
        :type data_alerts: int
        """

        self._data_alerts = data_alerts

    @property
    def ion_id(self):
        """Gets the ion_id of this ModelUsage.


        :return: The ion_id of this ModelUsage.
        :rtype: str
        """
        return self._ion_id

    @ion_id.setter
    def ion_id(self, ion_id):
        """Sets the ion_id of this ModelUsage.


        :param ion_id: The ion_id of this ModelUsage.
        :type ion_id: str
        """

        self._ion_id = ion_id

    @property
    def ion_name(self):
        """Gets the ion_name of this ModelUsage.


        :return: The ion_name of this ModelUsage.
        :rtype: str
        """
        return self._ion_name

    @ion_name.setter
    def ion_name(self, ion_name):
        """Sets the ion_name of this ModelUsage.


        :param ion_name: The ion_name of this ModelUsage.
        :type ion_name: str
        """

        self._ion_name = ion_name

    @property
    def ion_node_id(self):
        """Gets the ion_node_id of this ModelUsage.


        :return: The ion_node_id of this ModelUsage.
        :rtype: str
        """
        return self._ion_node_id

    @ion_node_id.setter
    def ion_node_id(self, ion_node_id):
        """Sets the ion_node_id of this ModelUsage.


        :param ion_node_id: The ion_node_id of this ModelUsage.
        :type ion_node_id: str
        """

        self._ion_node_id = ion_node_id

    @property
    def ml_alerts(self):
        """Gets the ml_alerts of this ModelUsage.


        :return: The ml_alerts of this ModelUsage.
        :rtype: int
        """
        return self._ml_alerts

    @ml_alerts.setter
    def ml_alerts(self, ml_alerts):
        """Sets the ml_alerts of this ModelUsage.


        :param ml_alerts: The ml_alerts of this ModelUsage.
        :type ml_alerts: int
        """

        self._ml_alerts = ml_alerts

    @property
    def model_id(self):
        """Gets the model_id of this ModelUsage.


        :return: The model_id of this ModelUsage.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ModelUsage.


        :param model_id: The model_id of this ModelUsage.
        :type model_id: str
        """

        self._model_id = model_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this ModelUsage.


        :return: The pipeline_id of this ModelUsage.
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this ModelUsage.


        :param pipeline_id: The pipeline_id of this ModelUsage.
        :type pipeline_id: str
        """

        self._pipeline_id = pipeline_id

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this ModelUsage.


        :return: The pipeline_name of this ModelUsage.
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this ModelUsage.


        :param pipeline_name: The pipeline_name of this ModelUsage.
        :type pipeline_name: str
        """

        self._pipeline_name = pipeline_name

    @property
    def predictions(self):
        """Gets the predictions of this ModelUsage.


        :return: The predictions of this ModelUsage.
        :rtype: int
        """
        return self._predictions

    @predictions.setter
    def predictions(self, predictions):
        """Sets the predictions of this ModelUsage.


        :param predictions: The predictions of this ModelUsage.
        :type predictions: int
        """

        self._predictions = predictions

    @property
    def usage_times(self):
        """Gets the usage_times of this ModelUsage.


        :return: The usage_times of this ModelUsage.
        :rtype: ModelUsageUsageTimes
        """
        return self._usage_times

    @usage_times.setter
    def usage_times(self, usage_times):
        """Sets the usage_times of this ModelUsage.


        :param usage_times: The usage_times of this ModelUsage.
        :type usage_times: ModelUsageUsageTimes
        """

        self._usage_times = usage_times

    @property
    def user(self):
        """Gets the user of this ModelUsage.


        :return: The user of this ModelUsage.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ModelUsage.


        :param user: The user of this ModelUsage.
        :type user: str
        """

        self._user = user
