# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mcenter_server_api.models.base_model_ import Model
from mcenter_server_api import util


class Role(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created=None, created_by=None, description=None, id=None, name=None, permissions=None):  # noqa: E501
        """Role - a model defined in OpenAPI

        :param created: The created of this Role.  # noqa: E501
        :type created: int
        :param created_by: The created_by of this Role.  # noqa: E501
        :type created_by: str
        :param description: The description of this Role.  # noqa: E501
        :type description: str
        :param id: The id of this Role.  # noqa: E501
        :type id: str
        :param name: The name of this Role.  # noqa: E501
        :type name: str
        :param permissions: The permissions of this Role.  # noqa: E501
        :type permissions: RolePermissions
        """
        self.openapi_types = {
            'created': 'int',
            'created_by': 'str',
            'description': 'str',
            'id': 'str',
            'name': 'str',
            'permissions': 'RolePermissions'
        }

        self.attribute_map = {
            'created': 'created',
            'created_by': 'createdBy',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'permissions': 'permissions'
        }

        self._created = created
        self._created_by = created_by
        self._description = description
        self._id = id
        self._name = name
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt) -> 'Role':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Role of this Role.  # noqa: E501
        :rtype: Role
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Role.


        :return: The created of this Role.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Role.


        :param created: The created of this Role.
        :type created: int
        """
        if created is not None and created < 0:  # noqa: E501
            raise ValueError("Invalid value for `created`, must be a value greater than or equal to `0`")  # noqa: E501

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this Role.


        :return: The created_by of this Role.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Role.


        :param created_by: The created_by of this Role.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this Role.


        :return: The description of this Role.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Role.


        :param description: The description of this Role.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this Role.


        :return: The id of this Role.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Role.


        :param id: The id of this Role.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Role.


        :return: The name of this Role.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Role.


        :param name: The name of this Role.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this Role.


        :return: The permissions of this Role.
        :rtype: RolePermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Role.


        :param permissions: The permissions of this Role.
        :type permissions: RolePermissions
        """

        self._permissions = permissions
