# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mcenter_server_api.models.base_model_ import Model
from mcenter_server_api import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_type=None, auth_mode=None, avatar_url=None, contact_no=None, created=None, created_by=None, email=None, first_name=None, id=None, last_name=None, name=None, password=None, role_ids=None, username=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param account_type: The account_type of this User.  # noqa: E501
        :type account_type: str
        :param auth_mode: The auth_mode of this User.  # noqa: E501
        :type auth_mode: str
        :param avatar_url: The avatar_url of this User.  # noqa: E501
        :type avatar_url: str
        :param contact_no: The contact_no of this User.  # noqa: E501
        :type contact_no: str
        :param created: The created of this User.  # noqa: E501
        :type created: int
        :param created_by: The created_by of this User.  # noqa: E501
        :type created_by: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param last_name: The last_name of this User.  # noqa: E501
        :type last_name: str
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param role_ids: The role_ids of this User.  # noqa: E501
        :type role_ids: List[str]
        :param username: The username of this User.  # noqa: E501
        :type username: str
        """
        self.openapi_types = {
            'account_type': 'str',
            'auth_mode': 'str',
            'avatar_url': 'str',
            'contact_no': 'str',
            'created': 'int',
            'created_by': 'str',
            'email': 'str',
            'first_name': 'str',
            'id': 'str',
            'last_name': 'str',
            'name': 'str',
            'password': 'str',
            'role_ids': 'List[str]',
            'username': 'str'
        }

        self.attribute_map = {
            'account_type': 'accountType',
            'auth_mode': 'authMode',
            'avatar_url': 'avatarURL',
            'contact_no': 'contactNo',
            'created': 'created',
            'created_by': 'createdBy',
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'name': 'name',
            'password': 'password',
            'role_ids': 'roleIds',
            'username': 'username'
        }

        self._account_type = account_type
        self._auth_mode = auth_mode
        self._avatar_url = avatar_url
        self._contact_no = contact_no
        self._created = created
        self._created_by = created_by
        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._name = name
        self._password = password
        self._role_ids = role_ids
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_type(self):
        """Gets the account_type of this User.


        :return: The account_type of this User.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this User.


        :param account_type: The account_type of this User.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def auth_mode(self):
        """Gets the auth_mode of this User.


        :return: The auth_mode of this User.
        :rtype: str
        """
        return self._auth_mode

    @auth_mode.setter
    def auth_mode(self, auth_mode):
        """Sets the auth_mode of this User.


        :param auth_mode: The auth_mode of this User.
        :type auth_mode: str
        """

        self._auth_mode = auth_mode

    @property
    def avatar_url(self):
        """Gets the avatar_url of this User.


        :return: The avatar_url of this User.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this User.


        :param avatar_url: The avatar_url of this User.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def contact_no(self):
        """Gets the contact_no of this User.


        :return: The contact_no of this User.
        :rtype: str
        """
        return self._contact_no

    @contact_no.setter
    def contact_no(self, contact_no):
        """Sets the contact_no of this User.


        :param contact_no: The contact_no of this User.
        :type contact_no: str
        """

        self._contact_no = contact_no

    @property
    def created(self):
        """Gets the created of this User.


        :return: The created of this User.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this User.


        :param created: The created of this User.
        :type created: int
        """
        if created is not None and created < 0:  # noqa: E501
            raise ValueError("Invalid value for `created`, must be a value greater than or equal to `0`")  # noqa: E501

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this User.


        :return: The created_by of this User.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this User.


        :param created_by: The created_by of this User.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def role_ids(self):
        """Gets the role_ids of this User.


        :return: The role_ids of this User.
        :rtype: List[str]
        """
        return self._role_ids

    @role_ids.setter
    def role_ids(self, role_ids):
        """Sets the role_ids of this User.


        :param role_ids: The role_ids of this User.
        :type role_ids: List[str]
        """

        self._role_ids = role_ids

    @property
    def username(self):
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username
