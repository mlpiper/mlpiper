# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mcenter_server_api.models.base_model_ import Model
from mcenter_server_api import util


class HealthView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bargraphs=None, end=None, events=None, heatmaps=None, ion_id=None, is_ml_healthy=None, kpi=None, start=None):  # noqa: E501
        """HealthView - a model defined in OpenAPI

        :param bargraphs: The bargraphs of this HealthView.  # noqa: E501
        :type bargraphs: List[DataComparisonView]
        :param end: The end of this HealthView.  # noqa: E501
        :type end: int
        :param events: The events of this HealthView.  # noqa: E501
        :type events: HealthViewEvents
        :param heatmaps: The heatmaps of this HealthView.  # noqa: E501
        :type heatmaps: List[HeatmapView]
        :param ion_id: The ion_id of this HealthView.  # noqa: E501
        :type ion_id: str
        :param is_ml_healthy: The is_ml_healthy of this HealthView.  # noqa: E501
        :type is_ml_healthy: bool
        :param kpi: The kpi of this HealthView.  # noqa: E501
        :type kpi: HealthViewEvents
        :param start: The start of this HealthView.  # noqa: E501
        :type start: int
        """
        self.openapi_types = {
            'bargraphs': 'List[DataComparisonView]',
            'end': 'int',
            'events': 'HealthViewEvents',
            'heatmaps': 'List[HeatmapView]',
            'ion_id': 'str',
            'is_ml_healthy': 'bool',
            'kpi': 'HealthViewEvents',
            'start': 'int'
        }

        self.attribute_map = {
            'bargraphs': 'bargraphs',
            'end': 'end',
            'events': 'events',
            'heatmaps': 'heatmaps',
            'ion_id': 'ionID',
            'is_ml_healthy': 'isMLHealthy',
            'kpi': 'kpi',
            'start': 'start'
        }

        self._bargraphs = bargraphs
        self._end = end
        self._events = events
        self._heatmaps = heatmaps
        self._ion_id = ion_id
        self._is_ml_healthy = is_ml_healthy
        self._kpi = kpi
        self._start = start

    @classmethod
    def from_dict(cls, dikt) -> 'HealthView':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HealthView of this HealthView.  # noqa: E501
        :rtype: HealthView
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bargraphs(self):
        """Gets the bargraphs of this HealthView.


        :return: The bargraphs of this HealthView.
        :rtype: List[DataComparisonView]
        """
        return self._bargraphs

    @bargraphs.setter
    def bargraphs(self, bargraphs):
        """Sets the bargraphs of this HealthView.


        :param bargraphs: The bargraphs of this HealthView.
        :type bargraphs: List[DataComparisonView]
        """

        self._bargraphs = bargraphs

    @property
    def end(self):
        """Gets the end of this HealthView.


        :return: The end of this HealthView.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this HealthView.


        :param end: The end of this HealthView.
        :type end: int
        """

        self._end = end

    @property
    def events(self):
        """Gets the events of this HealthView.


        :return: The events of this HealthView.
        :rtype: HealthViewEvents
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this HealthView.


        :param events: The events of this HealthView.
        :type events: HealthViewEvents
        """

        self._events = events

    @property
    def heatmaps(self):
        """Gets the heatmaps of this HealthView.


        :return: The heatmaps of this HealthView.
        :rtype: List[HeatmapView]
        """
        return self._heatmaps

    @heatmaps.setter
    def heatmaps(self, heatmaps):
        """Sets the heatmaps of this HealthView.


        :param heatmaps: The heatmaps of this HealthView.
        :type heatmaps: List[HeatmapView]
        """

        self._heatmaps = heatmaps

    @property
    def ion_id(self):
        """Gets the ion_id of this HealthView.


        :return: The ion_id of this HealthView.
        :rtype: str
        """
        return self._ion_id

    @ion_id.setter
    def ion_id(self, ion_id):
        """Sets the ion_id of this HealthView.


        :param ion_id: The ion_id of this HealthView.
        :type ion_id: str
        """

        self._ion_id = ion_id

    @property
    def is_ml_healthy(self):
        """Gets the is_ml_healthy of this HealthView.


        :return: The is_ml_healthy of this HealthView.
        :rtype: bool
        """
        return self._is_ml_healthy

    @is_ml_healthy.setter
    def is_ml_healthy(self, is_ml_healthy):
        """Sets the is_ml_healthy of this HealthView.


        :param is_ml_healthy: The is_ml_healthy of this HealthView.
        :type is_ml_healthy: bool
        """

        self._is_ml_healthy = is_ml_healthy

    @property
    def kpi(self):
        """Gets the kpi of this HealthView.


        :return: The kpi of this HealthView.
        :rtype: HealthViewEvents
        """
        return self._kpi

    @kpi.setter
    def kpi(self, kpi):
        """Sets the kpi of this HealthView.


        :param kpi: The kpi of this HealthView.
        :type kpi: HealthViewEvents
        """

        self._kpi = kpi

    @property
    def start(self):
        """Gets the start of this HealthView.


        :return: The start of this HealthView.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this HealthView.


        :param start: The start of this HealthView.
        :type start: int
        """

        self._start = start
