# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mcenter_server_api.models.base_model_ import Model
from mcenter_server_api import util


class DataView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_id=None, charts=None, end=None, events=None, ion=None, ion_id=None, ion_node_id=None, is_ml_healthy=None, pipeline_id=None, start=None):  # noqa: E501
        """DataView - a model defined in OpenAPI

        :param agent_id: The agent_id of this DataView.  # noqa: E501
        :type agent_id: str
        :param charts: The charts of this DataView.  # noqa: E501
        :type charts: List[ChartView]
        :param end: The end of this DataView.  # noqa: E501
        :type end: int
        :param events: The events of this DataView.  # noqa: E501
        :type events: HealthViewEvents
        :param ion: The ion of this DataView.  # noqa: E501
        :type ion: DataViewIon
        :param ion_id: The ion_id of this DataView.  # noqa: E501
        :type ion_id: str
        :param ion_node_id: The ion_node_id of this DataView.  # noqa: E501
        :type ion_node_id: str
        :param is_ml_healthy: The is_ml_healthy of this DataView.  # noqa: E501
        :type is_ml_healthy: bool
        :param pipeline_id: The pipeline_id of this DataView.  # noqa: E501
        :type pipeline_id: str
        :param start: The start of this DataView.  # noqa: E501
        :type start: int
        """
        self.openapi_types = {
            'agent_id': 'str',
            'charts': 'List[ChartView]',
            'end': 'int',
            'events': 'HealthViewEvents',
            'ion': 'DataViewIon',
            'ion_id': 'str',
            'ion_node_id': 'str',
            'is_ml_healthy': 'bool',
            'pipeline_id': 'str',
            'start': 'int'
        }

        self.attribute_map = {
            'agent_id': 'agentId',
            'charts': 'charts',
            'end': 'end',
            'events': 'events',
            'ion': 'ion',
            'ion_id': 'ionID',
            'ion_node_id': 'ionNodeId',
            'is_ml_healthy': 'isMLHealthy',
            'pipeline_id': 'pipelineId',
            'start': 'start'
        }

        self._agent_id = agent_id
        self._charts = charts
        self._end = end
        self._events = events
        self._ion = ion
        self._ion_id = ion_id
        self._ion_node_id = ion_node_id
        self._is_ml_healthy = is_ml_healthy
        self._pipeline_id = pipeline_id
        self._start = start

    @classmethod
    def from_dict(cls, dikt) -> 'DataView':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataView of this DataView.  # noqa: E501
        :rtype: DataView
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_id(self):
        """Gets the agent_id of this DataView.


        :return: The agent_id of this DataView.
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this DataView.


        :param agent_id: The agent_id of this DataView.
        :type agent_id: str
        """

        self._agent_id = agent_id

    @property
    def charts(self):
        """Gets the charts of this DataView.


        :return: The charts of this DataView.
        :rtype: List[ChartView]
        """
        return self._charts

    @charts.setter
    def charts(self, charts):
        """Sets the charts of this DataView.


        :param charts: The charts of this DataView.
        :type charts: List[ChartView]
        """

        self._charts = charts

    @property
    def end(self):
        """Gets the end of this DataView.


        :return: The end of this DataView.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this DataView.


        :param end: The end of this DataView.
        :type end: int
        """

        self._end = end

    @property
    def events(self):
        """Gets the events of this DataView.


        :return: The events of this DataView.
        :rtype: HealthViewEvents
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this DataView.


        :param events: The events of this DataView.
        :type events: HealthViewEvents
        """

        self._events = events

    @property
    def ion(self):
        """Gets the ion of this DataView.


        :return: The ion of this DataView.
        :rtype: DataViewIon
        """
        return self._ion

    @ion.setter
    def ion(self, ion):
        """Sets the ion of this DataView.


        :param ion: The ion of this DataView.
        :type ion: DataViewIon
        """

        self._ion = ion

    @property
    def ion_id(self):
        """Gets the ion_id of this DataView.


        :return: The ion_id of this DataView.
        :rtype: str
        """
        return self._ion_id

    @ion_id.setter
    def ion_id(self, ion_id):
        """Sets the ion_id of this DataView.


        :param ion_id: The ion_id of this DataView.
        :type ion_id: str
        """

        self._ion_id = ion_id

    @property
    def ion_node_id(self):
        """Gets the ion_node_id of this DataView.


        :return: The ion_node_id of this DataView.
        :rtype: str
        """
        return self._ion_node_id

    @ion_node_id.setter
    def ion_node_id(self, ion_node_id):
        """Sets the ion_node_id of this DataView.


        :param ion_node_id: The ion_node_id of this DataView.
        :type ion_node_id: str
        """

        self._ion_node_id = ion_node_id

    @property
    def is_ml_healthy(self):
        """Gets the is_ml_healthy of this DataView.


        :return: The is_ml_healthy of this DataView.
        :rtype: bool
        """
        return self._is_ml_healthy

    @is_ml_healthy.setter
    def is_ml_healthy(self, is_ml_healthy):
        """Sets the is_ml_healthy of this DataView.


        :param is_ml_healthy: The is_ml_healthy of this DataView.
        :type is_ml_healthy: bool
        """

        self._is_ml_healthy = is_ml_healthy

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this DataView.


        :return: The pipeline_id of this DataView.
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this DataView.


        :param pipeline_id: The pipeline_id of this DataView.
        :type pipeline_id: str
        """

        self._pipeline_id = pipeline_id

    @property
    def start(self):
        """Gets the start of this DataView.


        :return: The start of this DataView.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this DataView.


        :param start: The start of this DataView.
        :type start: int
        """

        self._start = start
