# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mcenter_server_api.models.base_model_ import Model
from mcenter_server_api import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cleared_timestamp=None, created=None, created_by=None, created_timestamp=None, deleted_timestamp=None, description=None, host=None, id=None, model_id=None, name=None, pipeline_instance_id=None, raise_alert=None, workflow_run_id=None):  # noqa: E501
        """Event - a model defined in OpenAPI

        :param cleared_timestamp: The cleared_timestamp of this Event.  # noqa: E501
        :type cleared_timestamp: int
        :param created: The created of this Event.  # noqa: E501
        :type created: int
        :param created_by: The created_by of this Event.  # noqa: E501
        :type created_by: str
        :param created_timestamp: The created_timestamp of this Event.  # noqa: E501
        :type created_timestamp: int
        :param deleted_timestamp: The deleted_timestamp of this Event.  # noqa: E501
        :type deleted_timestamp: int
        :param description: The description of this Event.  # noqa: E501
        :type description: str
        :param host: The host of this Event.  # noqa: E501
        :type host: str
        :param id: The id of this Event.  # noqa: E501
        :type id: str
        :param model_id: The model_id of this Event.  # noqa: E501
        :type model_id: str
        :param name: The name of this Event.  # noqa: E501
        :type name: str
        :param pipeline_instance_id: The pipeline_instance_id of this Event.  # noqa: E501
        :type pipeline_instance_id: str
        :param raise_alert: The raise_alert of this Event.  # noqa: E501
        :type raise_alert: bool
        :param workflow_run_id: The workflow_run_id of this Event.  # noqa: E501
        :type workflow_run_id: str
        """
        self.openapi_types = {
            'cleared_timestamp': 'int',
            'created': 'int',
            'created_by': 'str',
            'created_timestamp': 'int',
            'deleted_timestamp': 'int',
            'description': 'str',
            'host': 'str',
            'id': 'str',
            'model_id': 'str',
            'name': 'str',
            'pipeline_instance_id': 'str',
            'raise_alert': 'bool',
            'workflow_run_id': 'str'
        }

        self.attribute_map = {
            'cleared_timestamp': 'clearedTimestamp',
            'created': 'created',
            'created_by': 'createdBy',
            'created_timestamp': 'createdTimestamp',
            'deleted_timestamp': 'deletedTimestamp',
            'description': 'description',
            'host': 'host',
            'id': 'id',
            'model_id': 'modelId',
            'name': 'name',
            'pipeline_instance_id': 'pipelineInstanceId',
            'raise_alert': 'raiseAlert',
            'workflow_run_id': 'workflowRunId'
        }

        self._cleared_timestamp = cleared_timestamp
        self._created = created
        self._created_by = created_by
        self._created_timestamp = created_timestamp
        self._deleted_timestamp = deleted_timestamp
        self._description = description
        self._host = host
        self._id = id
        self._model_id = model_id
        self._name = name
        self._pipeline_instance_id = pipeline_instance_id
        self._raise_alert = raise_alert
        self._workflow_run_id = workflow_run_id

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cleared_timestamp(self):
        """Gets the cleared_timestamp of this Event.


        :return: The cleared_timestamp of this Event.
        :rtype: int
        """
        return self._cleared_timestamp

    @cleared_timestamp.setter
    def cleared_timestamp(self, cleared_timestamp):
        """Sets the cleared_timestamp of this Event.


        :param cleared_timestamp: The cleared_timestamp of this Event.
        :type cleared_timestamp: int
        """

        self._cleared_timestamp = cleared_timestamp

    @property
    def created(self):
        """Gets the created of this Event.


        :return: The created of this Event.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Event.


        :param created: The created of this Event.
        :type created: int
        """
        if created is not None and created < 0:  # noqa: E501
            raise ValueError("Invalid value for `created`, must be a value greater than or equal to `0`")  # noqa: E501

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this Event.


        :return: The created_by of this Event.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Event.


        :param created_by: The created_by of this Event.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Event.


        :return: The created_timestamp of this Event.
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Event.


        :param created_timestamp: The created_timestamp of this Event.
        :type created_timestamp: int
        """

        self._created_timestamp = created_timestamp

    @property
    def deleted_timestamp(self):
        """Gets the deleted_timestamp of this Event.


        :return: The deleted_timestamp of this Event.
        :rtype: int
        """
        return self._deleted_timestamp

    @deleted_timestamp.setter
    def deleted_timestamp(self, deleted_timestamp):
        """Sets the deleted_timestamp of this Event.


        :param deleted_timestamp: The deleted_timestamp of this Event.
        :type deleted_timestamp: int
        """

        self._deleted_timestamp = deleted_timestamp

    @property
    def description(self):
        """Gets the description of this Event.


        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.


        :param description: The description of this Event.
        :type description: str
        """

        self._description = description

    @property
    def host(self):
        """Gets the host of this Event.


        :return: The host of this Event.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Event.


        :param host: The host of this Event.
        :type host: str
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: str
        """

        self._id = id

    @property
    def model_id(self):
        """Gets the model_id of this Event.


        :return: The model_id of this Event.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Event.


        :param model_id: The model_id of this Event.
        :type model_id: str
        """

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this Event.


        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.
        :type name: str
        """

        self._name = name

    @property
    def pipeline_instance_id(self):
        """Gets the pipeline_instance_id of this Event.


        :return: The pipeline_instance_id of this Event.
        :rtype: str
        """
        return self._pipeline_instance_id

    @pipeline_instance_id.setter
    def pipeline_instance_id(self, pipeline_instance_id):
        """Sets the pipeline_instance_id of this Event.


        :param pipeline_instance_id: The pipeline_instance_id of this Event.
        :type pipeline_instance_id: str
        """

        self._pipeline_instance_id = pipeline_instance_id

    @property
    def raise_alert(self):
        """Gets the raise_alert of this Event.


        :return: The raise_alert of this Event.
        :rtype: bool
        """
        return self._raise_alert

    @raise_alert.setter
    def raise_alert(self, raise_alert):
        """Sets the raise_alert of this Event.


        :param raise_alert: The raise_alert of this Event.
        :type raise_alert: bool
        """

        self._raise_alert = raise_alert

    @property
    def workflow_run_id(self):
        """Gets the workflow_run_id of this Event.


        :return: The workflow_run_id of this Event.
        :rtype: str
        """
        return self._workflow_run_id

    @workflow_run_id.setter
    def workflow_run_id(self, workflow_run_id):
        """Sets the workflow_run_id of this Event.


        :param workflow_run_id: The workflow_run_id of this Event.
        :type workflow_run_id: str
        """

        self._workflow_run_id = workflow_run_id
