# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mcenter_server_api.models.base_model_ import Model
from mcenter_server_api import util


class Dashboard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg_inference_time=None, avg_latency=None, avg_training_time=None, data_alerts=None, enable_health=None, ion_health_info=None, ion_instance=None, is_ml_healthy=None, is_system_healthy=None, ml_alerts=None, operation_mode=None, pending_models=None, status=None, total_data_processed=None, total_models_produced=None, total_models_updated=None, total_predictions=None, total_samples_processed=None):  # noqa: E501
        """Dashboard - a model defined in OpenAPI

        :param avg_inference_time: The avg_inference_time of this Dashboard.  # noqa: E501
        :type avg_inference_time: int
        :param avg_latency: The avg_latency of this Dashboard.  # noqa: E501
        :type avg_latency: int
        :param avg_training_time: The avg_training_time of this Dashboard.  # noqa: E501
        :type avg_training_time: int
        :param data_alerts: The data_alerts of this Dashboard.  # noqa: E501
        :type data_alerts: int
        :param enable_health: The enable_health of this Dashboard.  # noqa: E501
        :type enable_health: bool
        :param ion_health_info: The ion_health_info of this Dashboard.  # noqa: E501
        :type ion_health_info: List[DashboardIonHealthInfo]
        :param ion_instance: The ion_instance of this Dashboard.  # noqa: E501
        :type ion_instance: object
        :param is_ml_healthy: The is_ml_healthy of this Dashboard.  # noqa: E501
        :type is_ml_healthy: bool
        :param is_system_healthy: The is_system_healthy of this Dashboard.  # noqa: E501
        :type is_system_healthy: bool
        :param ml_alerts: The ml_alerts of this Dashboard.  # noqa: E501
        :type ml_alerts: int
        :param operation_mode: The operation_mode of this Dashboard.  # noqa: E501
        :type operation_mode: str
        :param pending_models: The pending_models of this Dashboard.  # noqa: E501
        :type pending_models: int
        :param status: The status of this Dashboard.  # noqa: E501
        :type status: bool
        :param total_data_processed: The total_data_processed of this Dashboard.  # noqa: E501
        :type total_data_processed: int
        :param total_models_produced: The total_models_produced of this Dashboard.  # noqa: E501
        :type total_models_produced: int
        :param total_models_updated: The total_models_updated of this Dashboard.  # noqa: E501
        :type total_models_updated: int
        :param total_predictions: The total_predictions of this Dashboard.  # noqa: E501
        :type total_predictions: int
        :param total_samples_processed: The total_samples_processed of this Dashboard.  # noqa: E501
        :type total_samples_processed: int
        """
        self.openapi_types = {
            'avg_inference_time': 'int',
            'avg_latency': 'int',
            'avg_training_time': 'int',
            'data_alerts': 'int',
            'enable_health': 'bool',
            'ion_health_info': 'List[DashboardIonHealthInfo]',
            'ion_instance': 'object',
            'is_ml_healthy': 'bool',
            'is_system_healthy': 'bool',
            'ml_alerts': 'int',
            'operation_mode': 'str',
            'pending_models': 'int',
            'status': 'bool',
            'total_data_processed': 'int',
            'total_models_produced': 'int',
            'total_models_updated': 'int',
            'total_predictions': 'int',
            'total_samples_processed': 'int'
        }

        self.attribute_map = {
            'avg_inference_time': 'avgInferenceTime',
            'avg_latency': 'avgLatency',
            'avg_training_time': 'avgTrainingTime',
            'data_alerts': 'dataAlerts',
            'enable_health': 'enableHealth',
            'ion_health_info': 'ionHealthInfo',
            'ion_instance': 'ionInstance',
            'is_ml_healthy': 'isMLHealthy',
            'is_system_healthy': 'isSystemHealthy',
            'ml_alerts': 'mlAlerts',
            'operation_mode': 'operationMode',
            'pending_models': 'pendingModels',
            'status': 'status',
            'total_data_processed': 'totalDataProcessed',
            'total_models_produced': 'totalModelsProduced',
            'total_models_updated': 'totalModelsUpdated',
            'total_predictions': 'totalPredictions',
            'total_samples_processed': 'totalSamplesProcessed'
        }

        self._avg_inference_time = avg_inference_time
        self._avg_latency = avg_latency
        self._avg_training_time = avg_training_time
        self._data_alerts = data_alerts
        self._enable_health = enable_health
        self._ion_health_info = ion_health_info
        self._ion_instance = ion_instance
        self._is_ml_healthy = is_ml_healthy
        self._is_system_healthy = is_system_healthy
        self._ml_alerts = ml_alerts
        self._operation_mode = operation_mode
        self._pending_models = pending_models
        self._status = status
        self._total_data_processed = total_data_processed
        self._total_models_produced = total_models_produced
        self._total_models_updated = total_models_updated
        self._total_predictions = total_predictions
        self._total_samples_processed = total_samples_processed

    @classmethod
    def from_dict(cls, dikt) -> 'Dashboard':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dashboard of this Dashboard.  # noqa: E501
        :rtype: Dashboard
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_inference_time(self):
        """Gets the avg_inference_time of this Dashboard.


        :return: The avg_inference_time of this Dashboard.
        :rtype: int
        """
        return self._avg_inference_time

    @avg_inference_time.setter
    def avg_inference_time(self, avg_inference_time):
        """Sets the avg_inference_time of this Dashboard.


        :param avg_inference_time: The avg_inference_time of this Dashboard.
        :type avg_inference_time: int
        """

        self._avg_inference_time = avg_inference_time

    @property
    def avg_latency(self):
        """Gets the avg_latency of this Dashboard.


        :return: The avg_latency of this Dashboard.
        :rtype: int
        """
        return self._avg_latency

    @avg_latency.setter
    def avg_latency(self, avg_latency):
        """Sets the avg_latency of this Dashboard.


        :param avg_latency: The avg_latency of this Dashboard.
        :type avg_latency: int
        """

        self._avg_latency = avg_latency

    @property
    def avg_training_time(self):
        """Gets the avg_training_time of this Dashboard.


        :return: The avg_training_time of this Dashboard.
        :rtype: int
        """
        return self._avg_training_time

    @avg_training_time.setter
    def avg_training_time(self, avg_training_time):
        """Sets the avg_training_time of this Dashboard.


        :param avg_training_time: The avg_training_time of this Dashboard.
        :type avg_training_time: int
        """

        self._avg_training_time = avg_training_time

    @property
    def data_alerts(self):
        """Gets the data_alerts of this Dashboard.


        :return: The data_alerts of this Dashboard.
        :rtype: int
        """
        return self._data_alerts

    @data_alerts.setter
    def data_alerts(self, data_alerts):
        """Sets the data_alerts of this Dashboard.


        :param data_alerts: The data_alerts of this Dashboard.
        :type data_alerts: int
        """

        self._data_alerts = data_alerts

    @property
    def enable_health(self):
        """Gets the enable_health of this Dashboard.


        :return: The enable_health of this Dashboard.
        :rtype: bool
        """
        return self._enable_health

    @enable_health.setter
    def enable_health(self, enable_health):
        """Sets the enable_health of this Dashboard.


        :param enable_health: The enable_health of this Dashboard.
        :type enable_health: bool
        """

        self._enable_health = enable_health

    @property
    def ion_health_info(self):
        """Gets the ion_health_info of this Dashboard.


        :return: The ion_health_info of this Dashboard.
        :rtype: List[DashboardIonHealthInfo]
        """
        return self._ion_health_info

    @ion_health_info.setter
    def ion_health_info(self, ion_health_info):
        """Sets the ion_health_info of this Dashboard.


        :param ion_health_info: The ion_health_info of this Dashboard.
        :type ion_health_info: List[DashboardIonHealthInfo]
        """

        self._ion_health_info = ion_health_info

    @property
    def ion_instance(self):
        """Gets the ion_instance of this Dashboard.


        :return: The ion_instance of this Dashboard.
        :rtype: object
        """
        return self._ion_instance

    @ion_instance.setter
    def ion_instance(self, ion_instance):
        """Sets the ion_instance of this Dashboard.


        :param ion_instance: The ion_instance of this Dashboard.
        :type ion_instance: object
        """

        self._ion_instance = ion_instance

    @property
    def is_ml_healthy(self):
        """Gets the is_ml_healthy of this Dashboard.


        :return: The is_ml_healthy of this Dashboard.
        :rtype: bool
        """
        return self._is_ml_healthy

    @is_ml_healthy.setter
    def is_ml_healthy(self, is_ml_healthy):
        """Sets the is_ml_healthy of this Dashboard.


        :param is_ml_healthy: The is_ml_healthy of this Dashboard.
        :type is_ml_healthy: bool
        """

        self._is_ml_healthy = is_ml_healthy

    @property
    def is_system_healthy(self):
        """Gets the is_system_healthy of this Dashboard.


        :return: The is_system_healthy of this Dashboard.
        :rtype: bool
        """
        return self._is_system_healthy

    @is_system_healthy.setter
    def is_system_healthy(self, is_system_healthy):
        """Sets the is_system_healthy of this Dashboard.


        :param is_system_healthy: The is_system_healthy of this Dashboard.
        :type is_system_healthy: bool
        """

        self._is_system_healthy = is_system_healthy

    @property
    def ml_alerts(self):
        """Gets the ml_alerts of this Dashboard.


        :return: The ml_alerts of this Dashboard.
        :rtype: int
        """
        return self._ml_alerts

    @ml_alerts.setter
    def ml_alerts(self, ml_alerts):
        """Sets the ml_alerts of this Dashboard.


        :param ml_alerts: The ml_alerts of this Dashboard.
        :type ml_alerts: int
        """

        self._ml_alerts = ml_alerts

    @property
    def operation_mode(self):
        """Gets the operation_mode of this Dashboard.


        :return: The operation_mode of this Dashboard.
        :rtype: str
        """
        return self._operation_mode

    @operation_mode.setter
    def operation_mode(self, operation_mode):
        """Sets the operation_mode of this Dashboard.


        :param operation_mode: The operation_mode of this Dashboard.
        :type operation_mode: str
        """

        self._operation_mode = operation_mode

    @property
    def pending_models(self):
        """Gets the pending_models of this Dashboard.


        :return: The pending_models of this Dashboard.
        :rtype: int
        """
        return self._pending_models

    @pending_models.setter
    def pending_models(self, pending_models):
        """Sets the pending_models of this Dashboard.


        :param pending_models: The pending_models of this Dashboard.
        :type pending_models: int
        """

        self._pending_models = pending_models

    @property
    def status(self):
        """Gets the status of this Dashboard.


        :return: The status of this Dashboard.
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Dashboard.


        :param status: The status of this Dashboard.
        :type status: bool
        """

        self._status = status

    @property
    def total_data_processed(self):
        """Gets the total_data_processed of this Dashboard.


        :return: The total_data_processed of this Dashboard.
        :rtype: int
        """
        return self._total_data_processed

    @total_data_processed.setter
    def total_data_processed(self, total_data_processed):
        """Sets the total_data_processed of this Dashboard.


        :param total_data_processed: The total_data_processed of this Dashboard.
        :type total_data_processed: int
        """

        self._total_data_processed = total_data_processed

    @property
    def total_models_produced(self):
        """Gets the total_models_produced of this Dashboard.


        :return: The total_models_produced of this Dashboard.
        :rtype: int
        """
        return self._total_models_produced

    @total_models_produced.setter
    def total_models_produced(self, total_models_produced):
        """Sets the total_models_produced of this Dashboard.


        :param total_models_produced: The total_models_produced of this Dashboard.
        :type total_models_produced: int
        """

        self._total_models_produced = total_models_produced

    @property
    def total_models_updated(self):
        """Gets the total_models_updated of this Dashboard.


        :return: The total_models_updated of this Dashboard.
        :rtype: int
        """
        return self._total_models_updated

    @total_models_updated.setter
    def total_models_updated(self, total_models_updated):
        """Sets the total_models_updated of this Dashboard.


        :param total_models_updated: The total_models_updated of this Dashboard.
        :type total_models_updated: int
        """

        self._total_models_updated = total_models_updated

    @property
    def total_predictions(self):
        """Gets the total_predictions of this Dashboard.


        :return: The total_predictions of this Dashboard.
        :rtype: int
        """
        return self._total_predictions

    @total_predictions.setter
    def total_predictions(self, total_predictions):
        """Sets the total_predictions of this Dashboard.


        :param total_predictions: The total_predictions of this Dashboard.
        :type total_predictions: int
        """

        self._total_predictions = total_predictions

    @property
    def total_samples_processed(self):
        """Gets the total_samples_processed of this Dashboard.


        :return: The total_samples_processed of this Dashboard.
        :rtype: int
        """
        return self._total_samples_processed

    @total_samples_processed.setter
    def total_samples_processed(self, total_samples_processed):
        """Sets the total_samples_processed of this Dashboard.


        :param total_samples_processed: The total_samples_processed of this Dashboard.
        :type total_samples_processed: int
        """

        self._total_samples_processed = total_samples_processed
