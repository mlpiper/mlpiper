# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mcenter_server_api.models.base_model_ import Model
from mcenter_server_api import util


class MLAppPatternWorkflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parent=None, children=None, workflow_node_type=None, rest_server_port=None, parallelism=None, pipeline_mode=None, id=None, is_visible=None, pipeline_type=None, pipeline_pattern_id=None, cron_schedule=None):  # noqa: E501
        """MLAppPatternWorkflow - a model defined in OpenAPI

        :param parent: The parent of this MLAppPatternWorkflow.  # noqa: E501
        :type parent: str
        :param children: The children of this MLAppPatternWorkflow.  # noqa: E501
        :type children: str
        :param workflow_node_type: The workflow_node_type of this MLAppPatternWorkflow.  # noqa: E501
        :type workflow_node_type: str
        :param rest_server_port: The rest_server_port of this MLAppPatternWorkflow.  # noqa: E501
        :type rest_server_port: int
        :param parallelism: The parallelism of this MLAppPatternWorkflow.  # noqa: E501
        :type parallelism: int
        :param pipeline_mode: The pipeline_mode of this MLAppPatternWorkflow.  # noqa: E501
        :type pipeline_mode: str
        :param id: The id of this MLAppPatternWorkflow.  # noqa: E501
        :type id: str
        :param is_visible: The is_visible of this MLAppPatternWorkflow.  # noqa: E501
        :type is_visible: bool
        :param pipeline_type: The pipeline_type of this MLAppPatternWorkflow.  # noqa: E501
        :type pipeline_type: str
        :param pipeline_pattern_id: The pipeline_pattern_id of this MLAppPatternWorkflow.  # noqa: E501
        :type pipeline_pattern_id: str
        :param cron_schedule: The cron_schedule of this MLAppPatternWorkflow.  # noqa: E501
        :type cron_schedule: str
        """
        self.openapi_types = {
            'parent': 'str',
            'children': 'str',
            'workflow_node_type': 'str',
            'rest_server_port': 'int',
            'parallelism': 'int',
            'pipeline_mode': 'str',
            'id': 'str',
            'is_visible': 'bool',
            'pipeline_type': 'str',
            'pipeline_pattern_id': 'str',
            'cron_schedule': 'str'
        }

        self.attribute_map = {
            'parent': 'parent',
            'children': 'children',
            'workflow_node_type': 'workflowNodeType',
            'rest_server_port': 'restServerPort',
            'parallelism': 'parallelism',
            'pipeline_mode': 'pipelineMode',
            'id': 'id',
            'is_visible': 'isVisible',
            'pipeline_type': 'pipelineType',
            'pipeline_pattern_id': 'pipelinePatternId',
            'cron_schedule': 'cronSchedule'
        }

        self._parent = parent
        self._children = children
        self._workflow_node_type = workflow_node_type
        self._rest_server_port = rest_server_port
        self._parallelism = parallelism
        self._pipeline_mode = pipeline_mode
        self._id = id
        self._is_visible = is_visible
        self._pipeline_type = pipeline_type
        self._pipeline_pattern_id = pipeline_pattern_id
        self._cron_schedule = cron_schedule

    @classmethod
    def from_dict(cls, dikt) -> 'MLAppPatternWorkflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MLAppPattern_workflow of this MLAppPatternWorkflow.  # noqa: E501
        :rtype: MLAppPatternWorkflow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parent(self):
        """Gets the parent of this MLAppPatternWorkflow.


        :return: The parent of this MLAppPatternWorkflow.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this MLAppPatternWorkflow.


        :param parent: The parent of this MLAppPatternWorkflow.
        :type parent: str
        """

        self._parent = parent

    @property
    def children(self):
        """Gets the children of this MLAppPatternWorkflow.


        :return: The children of this MLAppPatternWorkflow.
        :rtype: str
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this MLAppPatternWorkflow.


        :param children: The children of this MLAppPatternWorkflow.
        :type children: str
        """

        self._children = children

    @property
    def workflow_node_type(self):
        """Gets the workflow_node_type of this MLAppPatternWorkflow.


        :return: The workflow_node_type of this MLAppPatternWorkflow.
        :rtype: str
        """
        return self._workflow_node_type

    @workflow_node_type.setter
    def workflow_node_type(self, workflow_node_type):
        """Sets the workflow_node_type of this MLAppPatternWorkflow.


        :param workflow_node_type: The workflow_node_type of this MLAppPatternWorkflow.
        :type workflow_node_type: str
        """

        self._workflow_node_type = workflow_node_type

    @property
    def rest_server_port(self):
        """Gets the rest_server_port of this MLAppPatternWorkflow.


        :return: The rest_server_port of this MLAppPatternWorkflow.
        :rtype: int
        """
        return self._rest_server_port

    @rest_server_port.setter
    def rest_server_port(self, rest_server_port):
        """Sets the rest_server_port of this MLAppPatternWorkflow.


        :param rest_server_port: The rest_server_port of this MLAppPatternWorkflow.
        :type rest_server_port: int
        """

        self._rest_server_port = rest_server_port

    @property
    def parallelism(self):
        """Gets the parallelism of this MLAppPatternWorkflow.


        :return: The parallelism of this MLAppPatternWorkflow.
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this MLAppPatternWorkflow.


        :param parallelism: The parallelism of this MLAppPatternWorkflow.
        :type parallelism: int
        """

        self._parallelism = parallelism

    @property
    def pipeline_mode(self):
        """Gets the pipeline_mode of this MLAppPatternWorkflow.


        :return: The pipeline_mode of this MLAppPatternWorkflow.
        :rtype: str
        """
        return self._pipeline_mode

    @pipeline_mode.setter
    def pipeline_mode(self, pipeline_mode):
        """Sets the pipeline_mode of this MLAppPatternWorkflow.


        :param pipeline_mode: The pipeline_mode of this MLAppPatternWorkflow.
        :type pipeline_mode: str
        """

        self._pipeline_mode = pipeline_mode

    @property
    def id(self):
        """Gets the id of this MLAppPatternWorkflow.


        :return: The id of this MLAppPatternWorkflow.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MLAppPatternWorkflow.


        :param id: The id of this MLAppPatternWorkflow.
        :type id: str
        """

        self._id = id

    @property
    def is_visible(self):
        """Gets the is_visible of this MLAppPatternWorkflow.


        :return: The is_visible of this MLAppPatternWorkflow.
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this MLAppPatternWorkflow.


        :param is_visible: The is_visible of this MLAppPatternWorkflow.
        :type is_visible: bool
        """

        self._is_visible = is_visible

    @property
    def pipeline_type(self):
        """Gets the pipeline_type of this MLAppPatternWorkflow.


        :return: The pipeline_type of this MLAppPatternWorkflow.
        :rtype: str
        """
        return self._pipeline_type

    @pipeline_type.setter
    def pipeline_type(self, pipeline_type):
        """Sets the pipeline_type of this MLAppPatternWorkflow.


        :param pipeline_type: The pipeline_type of this MLAppPatternWorkflow.
        :type pipeline_type: str
        """

        self._pipeline_type = pipeline_type

    @property
    def pipeline_pattern_id(self):
        """Gets the pipeline_pattern_id of this MLAppPatternWorkflow.


        :return: The pipeline_pattern_id of this MLAppPatternWorkflow.
        :rtype: str
        """
        return self._pipeline_pattern_id

    @pipeline_pattern_id.setter
    def pipeline_pattern_id(self, pipeline_pattern_id):
        """Sets the pipeline_pattern_id of this MLAppPatternWorkflow.


        :param pipeline_pattern_id: The pipeline_pattern_id of this MLAppPatternWorkflow.
        :type pipeline_pattern_id: str
        """

        self._pipeline_pattern_id = pipeline_pattern_id

    @property
    def cron_schedule(self):
        """Gets the cron_schedule of this MLAppPatternWorkflow.


        :return: The cron_schedule of this MLAppPatternWorkflow.
        :rtype: str
        """
        return self._cron_schedule

    @cron_schedule.setter
    def cron_schedule(self, cron_schedule):
        """Sets the cron_schedule of this MLAppPatternWorkflow.


        :param cron_schedule: The cron_schedule of this MLAppPatternWorkflow.
        :type cron_schedule: str
        """

        self._cron_schedule = cron_schedule
