# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mcenter_server_api.models.base_model_ import Model
from mcenter_server_api import util


class MLAppPattern(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canary_threshold=None, created=None, created_by=None, enable_health=None, global_threshold=None, id=None, is_profile=None, model_policy=None, name=None, run_iterations=None, run_now=None, workflow=None):  # noqa: E501
        """MLAppPattern - a model defined in OpenAPI

        :param canary_threshold: The canary_threshold of this MLAppPattern.  # noqa: E501
        :type canary_threshold: int
        :param created: The created of this MLAppPattern.  # noqa: E501
        :type created: int
        :param created_by: The created_by of this MLAppPattern.  # noqa: E501
        :type created_by: str
        :param enable_health: The enable_health of this MLAppPattern.  # noqa: E501
        :type enable_health: bool
        :param global_threshold: The global_threshold of this MLAppPattern.  # noqa: E501
        :type global_threshold: int
        :param id: The id of this MLAppPattern.  # noqa: E501
        :type id: str
        :param is_profile: The is_profile of this MLAppPattern.  # noqa: E501
        :type is_profile: bool
        :param model_policy: The model_policy of this MLAppPattern.  # noqa: E501
        :type model_policy: str
        :param name: The name of this MLAppPattern.  # noqa: E501
        :type name: str
        :param run_iterations: The run_iterations of this MLAppPattern.  # noqa: E501
        :type run_iterations: int
        :param run_now: The run_now of this MLAppPattern.  # noqa: E501
        :type run_now: bool
        :param workflow: The workflow of this MLAppPattern.  # noqa: E501
        :type workflow: List[MLAppPatternWorkflow]
        """
        self.openapi_types = {
            'canary_threshold': 'int',
            'created': 'int',
            'created_by': 'str',
            'enable_health': 'bool',
            'global_threshold': 'int',
            'id': 'str',
            'is_profile': 'bool',
            'model_policy': 'str',
            'name': 'str',
            'run_iterations': 'int',
            'run_now': 'bool',
            'workflow': 'List[MLAppPatternWorkflow]'
        }

        self.attribute_map = {
            'canary_threshold': 'canaryThreshold',
            'created': 'created',
            'created_by': 'createdBy',
            'enable_health': 'enableHealth',
            'global_threshold': 'globalThreshold',
            'id': 'id',
            'is_profile': 'isProfile',
            'model_policy': 'modelPolicy',
            'name': 'name',
            'run_iterations': 'runIterations',
            'run_now': 'runNow',
            'workflow': 'workflow'
        }

        self._canary_threshold = canary_threshold
        self._created = created
        self._created_by = created_by
        self._enable_health = enable_health
        self._global_threshold = global_threshold
        self._id = id
        self._is_profile = is_profile
        self._model_policy = model_policy
        self._name = name
        self._run_iterations = run_iterations
        self._run_now = run_now
        self._workflow = workflow

    @classmethod
    def from_dict(cls, dikt) -> 'MLAppPattern':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MLAppPattern of this MLAppPattern.  # noqa: E501
        :rtype: MLAppPattern
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canary_threshold(self):
        """Gets the canary_threshold of this MLAppPattern.


        :return: The canary_threshold of this MLAppPattern.
        :rtype: int
        """
        return self._canary_threshold

    @canary_threshold.setter
    def canary_threshold(self, canary_threshold):
        """Sets the canary_threshold of this MLAppPattern.


        :param canary_threshold: The canary_threshold of this MLAppPattern.
        :type canary_threshold: int
        """

        self._canary_threshold = canary_threshold

    @property
    def created(self):
        """Gets the created of this MLAppPattern.


        :return: The created of this MLAppPattern.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MLAppPattern.


        :param created: The created of this MLAppPattern.
        :type created: int
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this MLAppPattern.


        :return: The created_by of this MLAppPattern.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MLAppPattern.


        :param created_by: The created_by of this MLAppPattern.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def enable_health(self):
        """Gets the enable_health of this MLAppPattern.


        :return: The enable_health of this MLAppPattern.
        :rtype: bool
        """
        return self._enable_health

    @enable_health.setter
    def enable_health(self, enable_health):
        """Sets the enable_health of this MLAppPattern.


        :param enable_health: The enable_health of this MLAppPattern.
        :type enable_health: bool
        """

        self._enable_health = enable_health

    @property
    def global_threshold(self):
        """Gets the global_threshold of this MLAppPattern.


        :return: The global_threshold of this MLAppPattern.
        :rtype: int
        """
        return self._global_threshold

    @global_threshold.setter
    def global_threshold(self, global_threshold):
        """Sets the global_threshold of this MLAppPattern.


        :param global_threshold: The global_threshold of this MLAppPattern.
        :type global_threshold: int
        """

        self._global_threshold = global_threshold

    @property
    def id(self):
        """Gets the id of this MLAppPattern.


        :return: The id of this MLAppPattern.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MLAppPattern.


        :param id: The id of this MLAppPattern.
        :type id: str
        """

        self._id = id

    @property
    def is_profile(self):
        """Gets the is_profile of this MLAppPattern.


        :return: The is_profile of this MLAppPattern.
        :rtype: bool
        """
        return self._is_profile

    @is_profile.setter
    def is_profile(self, is_profile):
        """Sets the is_profile of this MLAppPattern.


        :param is_profile: The is_profile of this MLAppPattern.
        :type is_profile: bool
        """

        self._is_profile = is_profile

    @property
    def model_policy(self):
        """Gets the model_policy of this MLAppPattern.


        :return: The model_policy of this MLAppPattern.
        :rtype: str
        """
        return self._model_policy

    @model_policy.setter
    def model_policy(self, model_policy):
        """Sets the model_policy of this MLAppPattern.


        :param model_policy: The model_policy of this MLAppPattern.
        :type model_policy: str
        """

        self._model_policy = model_policy

    @property
    def name(self):
        """Gets the name of this MLAppPattern.


        :return: The name of this MLAppPattern.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MLAppPattern.


        :param name: The name of this MLAppPattern.
        :type name: str
        """

        self._name = name

    @property
    def run_iterations(self):
        """Gets the run_iterations of this MLAppPattern.


        :return: The run_iterations of this MLAppPattern.
        :rtype: int
        """
        return self._run_iterations

    @run_iterations.setter
    def run_iterations(self, run_iterations):
        """Sets the run_iterations of this MLAppPattern.


        :param run_iterations: The run_iterations of this MLAppPattern.
        :type run_iterations: int
        """

        self._run_iterations = run_iterations

    @property
    def run_now(self):
        """Gets the run_now of this MLAppPattern.


        :return: The run_now of this MLAppPattern.
        :rtype: bool
        """
        return self._run_now

    @run_now.setter
    def run_now(self, run_now):
        """Sets the run_now of this MLAppPattern.


        :param run_now: The run_now of this MLAppPattern.
        :type run_now: bool
        """

        self._run_now = run_now

    @property
    def workflow(self):
        """Gets the workflow of this MLAppPattern.


        :return: The workflow of this MLAppPattern.
        :rtype: List[MLAppPatternWorkflow]
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this MLAppPattern.


        :param workflow: The workflow of this MLAppPattern.
        :type workflow: List[MLAppPatternWorkflow]
        """

        self._workflow = workflow
