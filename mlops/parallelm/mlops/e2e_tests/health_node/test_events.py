import time

from datetime import datetime, timedelta

from parallelm.mlops import mlops as mlops
from parallelm.mlops.events.system_alert import SystemAlert
from parallelm.mlops.events.health_alert import HealthAlert
from parallelm.mlops.events.data_alert import DataAlert
from parallelm.mlops.events.canary_alert import CanaryAlert
from parallelm.mlops.events.event_type import EventType

FETCH_ALERTS_NUM_RETRIES = 15
SLEEP_TIME_PER_RETRY_SEC = 1

EVENTS_TYPE = ['GenericDataAlert', 'GenericSystemAlert', 'GenericHealthAlert', 'Canary Health']


def test_events_basic():

    print("Testing events")
    mlops.health_alert("Health_Alert", "Alert while running test")
    mlops.data_alert("Data_Alert", "Alert from test")
    mlops.system_alert("System_Alert", "Operational alert from test")
    mlops.canary_alert("Canary_Alert", True, 5, 1)

    mlops.event(SystemAlert(label="sys_alert_1", description="sys_alert_1 desc"))
    mlops.event(HealthAlert(label="health_alert_1", description="health_alert_1 desc"))
    mlops.event(DataAlert(label="data_alert_1", description="data_alert_1 desc"))
    mlops.event(CanaryAlert(label="canary_alert_1", is_healthy=False, score=0.0, threshold=0.1))

    mlops.set_event(name="system alert", type=EventType.System, data="blablabla")


def test_alerts_fetching():

    print("test_alerts_fetching")
    mlops.health_alert("Health_Alert-2", "Health alert generated by 'test_alerts_fetching'")
    mlops.data_alert("Data_Alert-2", "Data alert generated by 'test_alerts_fetching'")
    mlops.system_alert("System_Alert-2", "Operational (System) alert generated by 'test_alerts_fetching'")
    mlops.canary_alert("Canary_Alert-2", is_healthy=False, score=0.2, threshold=0.1)

    # It takes time for the alerts to propagate up to the database
    active_ion_alerts = None
    for counter in range(FETCH_ALERTS_NUM_RETRIES):
        active_ion_alerts = mlops.get_events()
        if active_ion_alerts is None or active_ion_alerts.empty:
            print("Did not find alerts, trying again...")
            time.sleep(SLEEP_TIME_PER_RETRY_SEC)
            continue
        break

    assert active_ion_alerts is not None and not active_ion_alerts.empty

    time.sleep(3)
    all_alerts = mlops.get_events()
    print("\n\n\nALL ALERTS\n{}".format(all_alerts))

    num_all_alerts = len(all_alerts)
    num_active_ion_alerts = len(active_ion_alerts)

    assert num_active_ion_alerts <= num_all_alerts

    active_ion_alerts_ids = active_ion_alerts['id'].tolist()
    print("List of ides: {}".format(active_ion_alerts_ids))
    print("Active ion alerts ({}):".format(num_active_ion_alerts))

    nodes = active_ion_alerts["node"].tolist()
    print("Nodes col: {}".format(nodes))

    for index, alert in active_ion_alerts.iterrows():
        _print_alert(alert)

    print("Other alerts ({}):".format(num_all_alerts - num_active_ion_alerts))
    for index, alert in all_alerts.iterrows():
        if alert["id"] not in active_ion_alerts_ids:
            _print_alert(alert)


    # Fetching by time window
    now = datetime.utcnow()
    last_10_hour = (now - timedelta(hours=10))
    print("Getting last 10 hours events")
    events_df_per_time_window = mlops.get_events(start_time=last_10_hour, end_time=now)
    num_time_window_alerts = len(events_df_per_time_window)
    print("Last 10 hours events num {}  - all events num {}".format(num_time_window_alerts, num_all_alerts))
    assert num_time_window_alerts == num_all_alerts

    # Verifying types:
    type_only_df = events_df_per_time_window[['type']]
    unique_types_list = type_only_df.drop_duplicates()['type'].tolist()
    print("Unique types:")
    print(unique_types_list)

    for event_type in EVENTS_TYPE:
        if event_type not in unique_types_list:
            msg = "Error: event {} is not in unique event list".format(event_type)
            print(msg)
            raise Exception(msg)
    print("Done event fetching test")

def _print_alert(alert):
    try:
        print("  Created: {}, ion_id: {}, pipeid: {}, raise: {}, type: {}, desc: {}".format(
            alert["createdTimestamp"], alert["workflowRunId"], alert["pipelineInstanceId"],
            alert["raiseAlert"], alert["type"], alert["description"]))
    except Exception as e:
        print("  error: {}".format(str(e)))
